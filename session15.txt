
Python Package:
--------------
* It is an encapsulation mechanism to group related modules into a single unit.

* Package is nothing but a folder or directory which represents collection of python modules.

* Any folder or directory contains __init__.py file,is considered as a python package.

* This file can be empty.

* Package can contains sub packages also.



* A package is a collection of Python modules, i.e., a package is a directory of Python modules containing an additional __init__.py file.

* when you import a package, only variables/functions/classes in the __init__.py file of that package are directly visible, not sub-packages or modules.

Advantages of packages:
----------------------

1.We can resolve naming conflicts.

2.We can identify our components uniquely.

3.it improves modularity of the application.





--example1

import datetime
print(date.today())


--Example2


from datetime import date
print("date=",date.today())

How to Create a Python Package?

    Step 1: Create the Package Directory. So, first we create a directory named Animals .

    Step 2: Add Classes. Now, we create the two classes for our package. First, create a file named Mammals.py inside the Animals directory and put the following code in it: class Mammals:

--Examples
c:\jay\cars>



   1. First we create a directory and name it Cars.

    Then we need to create modules. To do this we need to create a file with the name Bmw.py and create its content by putting this code into it.
    # Python code to illustrate the Modules

    class BMW:
        # First we create a constructor for this class
        # and add members to it, here models
        def __init__(self):
            self.models = ['i8', 'x1', 'x5', 'x6']
      
        # A normal print function
        def outModels(self):
            print('These are the available models for BMW')
            for model in self.models:
                print('\t%s ' % model)

Then we create another file with the name Audi.py and add the similar type of code to it with different members.
# Python code to illustrate the Module

class Audi:
    # First we create a constructor for this class
    # and add members to it, here models
    def __init__(self):
        self.models = ['q7', 'a6', 'a8', 'a3']
 
    # A normal print function
    def outModels(self):
        print('These are the available models for Audi')
        for model in self.models:
            print('\t%s ' % model)

Then we create another file with the name Nissan.py and add the similar type of code to it with different members.

# Python code to illustrate the Module
class Nissan:
    # First we create a constructor for this class
    # and add members to it, here models
    def __init__(self):
        self.models = ['altima', '370z', 'cube', 'rogue']
 
    # A normal print function
    def outModels(self):
        print('These are the available models for Nissan')
        for model in self.models:
            print('\t%s ' % model)

Finally we create the __init__.py file. This file will be placed inside Cars directory and can be left blank or we can put this initialisation code into it.
from BMW import BMW
from Audi import Audi
from Nissan import Nissan

Now, let’s use the package that we created. To do this make a sample.py file in the same directory where Cars package is located and add the following code to it:

# how to invoke the car package?

c:\jay>notepad invoke.py

# Import classes from your brand new package
from cars.BMW import BMW
from cars.Audi import Audi
from cars.Nissan import Nissan
  
# Create an object of Bmw class & call its method
ModBMW = BMW()
ModBMW.outModels()
  
# Create an object of Audi class & call its method
ModAudi = Audi()
ModAudi.outModels()
 
# Create an object of Nissan class & call its method
ModNissan = Nissan()
ModNissan.outModels()

# How to run package?

c:\jay>python invoke.py


--How to create Subpackage:
---------------------------

c:\it\cars\bikes\Honda.py

class Honda:
    # First we create a constructor for this class
    # and add members to it, here models
    def __init__(self):
        self.models = ['Activa', 'Shine', 'CBZ', 'Hunk','Unicorn']
 
    # A normal print function
    def outModels(self):
        print('These are the available models for Honda')
        for model in self.models:
            print('\t%s ' % model)





--How to invoke from another direcotry?

c:\jay\invoke.py

from cars.BMW import BMW
from cars.Audi import Audi
from cars.Nissan import Nissan
from cars.bike.Honda import Honda
  
# Create an object of Bmw class & call its method
ModBMW = BMW()
ModBMW.outModels()
  
# Create an object of Audi class & call its method
ModAudi = Audi()
ModAudi.outModels()
 
# Create an object of Nissan class & call its method
ModNissan = Nissan()
ModNissan.outModels()

ModHonda = Honda()
ModHonda.outModels()


c:\it\cars\bikes\cycles\Honda.py

class BSA:
    # First we create a constructor for this class
    # and add members to it, here models
    def __init__(self):
        self.models = ['Herclues', 'BSA', 'Xyz', 'Mny','abc']
 
    # A normal print function
    def outModels(self):
        print('These are the available models for cycles')
        for model in self.models:
            print('\t%s ' % model)

# How to invoke module?

from cars.BMW import BMW
from cars.Audi import Audi
from cars.Nissan import Nissan
from cars.bikes.Honda import Honda
from cars.bikes.cycles.BSA import BSA
  
# Create an object of Bmw class & call its method
ModBMW = BMW()
ModBMW.outModels()
  
# Create an object of Audi class & call its method
ModAudi = Audi()
ModAudi.outModels()
 
# Create an object of Nissan class & call its method
ModNissan = Nissan()
ModNissan.outModels()

ModHonda = Honda()
ModHonda.outModels()

ModCycle = BSA()
ModCycle.outModels()


Assignment:
-------------
package : employee

Modules : emp.py, dept.py, salgrade.py,  __init__.py

classes : Emp Dept	Salgrade

function : getdetails()   getdata()	getsal()






20 Python popular libraries:
----------------------------

1. Requests. The most famous http library written by kenneth reitz. It’s a must have for every python developer.

2. Scrapy. If you are involved in webscraping then this is a must have library for you. After using this library you won’t use any other.

3. wxPython. A gui toolkit for python. I have primarily used it in place of tkinter. You will really love it.

4. Pillow. A friendly fork of PIL (Python Imaging Library). It is more user friendly than PIL and is a must have for anyone who works with images.

5. SQLAlchemy. A database library. Many love it and many hate it. The choice is yours.

6. BeautifulSoup. I know it’s slow but this xml and html parsing library is very useful for beginners.

7. Twisted. The most important tool for any network application developer. It has a very beautiful api and is used by a lot of famous python developers.

8. NumPy. How can we leave this very important library ? It provides some advance math functionalities to python.

9. SciPy. When we talk about NumPy then we have to talk about scipy. It is a library of algorithms and mathematical tools for python and has caused many scientists to switch from ruby to python.

10. matplotlib. A numerical plotting library. It is very useful for any data scientist or any data analyzer.

11. Pygame. Which developer does not like to play games and develop them ? This library will help you achieve your goal of 2d game development.

12. Pyglet. A 3d animation and game creation engine. This is the engine in which the famous python port of minecraft was made

13. pyQT. A GUI toolkit for python. It is my second choice after wxpython for developing GUI’s for my python scripts.

14. pyGtk. Another python GUI library. It is the same library in which the famous Bittorrent client is created.

15. Scapy. A packet sniffer and analyzer for python made in python.

16. pywin32. A python library which provides some useful methods and classes for interacting with windows.

17. nltk. Natural Language Toolkit – I realize most people won’t be using this one, but it’s generic enough. It is a very useful library if you want to manipulate strings. But it’s capacity is beyond that. Do check it out.

18. nose. A testing framework for python. It is used by millions of python developers. It is a must have if you do test driven development.

19. SymPy. SymPy can do algebraic evaluation, differentiation, expansion, complex numbers, etc. It is contained in a pure Python distribution.

20. IPython. I just can’t stress enough how useful this tool is. It is a python prompt on steroids. It has completion, history, shell capabilities, and a lot more. Make sure that you take a look at it.







